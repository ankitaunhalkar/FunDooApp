package com.bridgelabz.fundoonotes.user.services;

import javax.transaction.Transactional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.user.dao.IUserDao;
import com.bridgelabz.fundoonotes.user.model.Email;
import com.bridgelabz.fundoonotes.user.model.LoginDto;
import com.bridgelabz.fundoonotes.user.model.RegisterDto;
import com.bridgelabz.fundoonotes.user.model.ResetPasswordDto;
import com.bridgelabz.fundoonotes.user.model.User;
import com.bridgelabz.fundoonotes.user.util.MailProducer;
import com.bridgelabz.fundoonotes.user.util.TokenGenerator;

@Service
public class UserServiceImpl implements IUserService {

	@Autowired
	IUserDao userDao;

	@Autowired
	User user;

	@Autowired
	MailProducer mailSender;

	@Autowired
	Email email;
	
	@Override
	@Transactional
	public long register(RegisterDto registrationUser, String url) {

		long registeredStatus = 0;

		// checking if mail id is already exists or not
		User registerDaoStatus = userDao.getByEmail(registrationUser.getEmail());

		if (registerDaoStatus != null) {

			return registeredStatus;

		}

		// setting into user model
		user.setName(registrationUser.getName());
		user.setEmail(registrationUser.getEmail());
		user.setPassword(registrationUser.getPassword());

		// password encrypting
		user.setPassword(BCrypt.hashpw(user.getPassword(), BCrypt.gensalt()));

		// if not existing then save
		registeredStatus = userDao.save(user);
		
		// token generating 
		String token = TokenGenerator.createJWT(registeredStatus+"", "Ankita", "Verification", 24 * 3600 * 1000);
		
		// setting to email model
		email.setUrl(url);
		email.setName(registrationUser.getName());
		email.setEmailId(registrationUser.getEmail());
		email.setToken(token);

		// mail sending
		mailSender.sendMail(email);

		return registeredStatus;
	}

	@Override
	@Transactional
	public boolean login(LoginDto loginUser) {

		boolean status = false;

		// checking if mail id exists or not
		User loginDaoStatus = userDao.getByEmail(loginUser.getEmail());

		// if exists then matching the password
		if ((loginDaoStatus != null) && (BCrypt.checkpw(loginUser.getPassword(), loginDaoStatus.getPassword()))) {

			return status = true;
		}

		return status;
	}

	@Override
	@Transactional
	public boolean verify(String token) {
		
		long id = TokenGenerator.parseJWT(token);
		
		User user = userDao.getById(id);
		
		user.setVerified(true);
		
		userDao.update(user);
		
		return true;
	}

	@Override
	public boolean forgotPassword(ResetPasswordDto userDto, String url) {
		
		User user = userDao.getByEmail(userDto.getEmailId());
		
		String token = TokenGenerator.createJWT(user.getId()+"", "Ankita", "Verification", 24 * 3600 * 1000);
		
		// setting to email model
		email.setUrl(url);
		email.setName(user.getName());
		email.setEmailId(user.getEmail());
		email.setToken(token);

		// mail sending
		mailSender.sendMail(email);

		return true;
	}

	@Override
	public boolean resetPassword(ResetPasswordDto userDto, String token) {
		
		long id = TokenGenerator.parseJWT(token);
		
		User user = userDao.getById(id);
		
		user.setPassword(userDto.getNewPassword());
		
		userDao.update(user);
		
		return true;
	}

}
