package com.bridgelabz.fundoonotes.note.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.fundoonotes.note.model.CreateNoteDto;
import com.bridgelabz.fundoonotes.note.model.Note;
import com.bridgelabz.fundoonotes.note.services.INoteService;

@RestController
public class NoteController {

	@Autowired
	INoteService noteService;

	@RequestMapping(name = "/createnote", method = RequestMethod.POST)
	public ResponseEntity<String> createNote(@RequestBody CreateNoteDto note, HttpServletRequest request) {
		String token = request.getHeader("uid");

		long status = noteService.createNote(note, token);

		if (status > 0) {
			return new ResponseEntity<String>("Note Created", HttpStatus.CREATED);
		} else
			return new ResponseEntity<String>("Note couldn't create", HttpStatus.BAD_REQUEST);
	}

	@RequestMapping(name = "/getnotes", method = RequestMethod.GET)
	public ResponseEntity<List<Note>> getNotes(HttpServletRequest request) {
		String token = request.getHeader("uid");

		List<Note> notelist = noteService.getNotes(token);
		if (notelist != null) {
			return new ResponseEntity<List<Note>>(notelist, HttpStatus.ACCEPTED);
		}
		return new ResponseEntity<List<Note>>(notelist, HttpStatus.NOT_FOUND);

	}

	public ResponseEntity<String> updateNote(@RequestBody CreateNoteDto note, HttpServletRequest request) {
		String token = request.getHeader("uid");

		long status = noteService.updateNote(note);

		if (status > 0) {
			return new ResponseEntity<String>("Note Created", HttpStatus.CREATED);
		} else
			return new ResponseEntity<String>("Note couldn't create", HttpStatus.BAD_REQUEST);

	}
}