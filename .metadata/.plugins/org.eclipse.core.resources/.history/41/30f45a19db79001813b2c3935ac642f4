package com.bridgelabz.fundoonotes.user.services;

import javax.transaction.Transactional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.user.dao.IUserDao;
import com.bridgelabz.fundoonotes.user.model.LoginDto;
import com.bridgelabz.fundoonotes.user.model.RegisterDto;
import com.bridgelabz.fundoonotes.user.model.User;

@Service
public class UserServiceImpl implements IUserService {

	@Autowired
	IUserDao userDao;

	@Override
	@Transactional
	public int register(RegisterDto registrationUser) {
		int registerStatus = 0;
		
		//setting into user model
		User user = new User();
		user.setName(registrationUser.getName());
		user.setEmail(registrationUser.getEmail());
		user.setPassword(registrationUser.getPassword());
		
		//checking if mail id is already exists or not
		User userRegister = userDao.getByEmail(user.getEmail());
				
		if (userRegister != null) {
			
			return registerStatus;
			
		}
		
		//password encoding
		registrationUser.setPassword(BCrypt.hashpw(user.getPassword(), BCrypt.gensalt()));
		
		//if not existing then save
		return registerStatus = userDao.save(user);
	}

	@Override
	@Transactional
	public boolean login(LoginDto user) {
		boolean status=false;
		
		//checking if mail id exists or not
		User loginStatus = userDao.getByEmail(user.getEmail());
				
		//if exists then matching the password 
		if ((loginStatus != null) && (BCrypt.checkpw(user.getPassword(), loginStatus.getPassword()))) {
			
			return status = true;
		}
		
		return status;
	}

}
